sys.append("../Vision")
sys.append("../Motor")
import s_Vision,s_Motor
#import Vision,Motor
import threading, thread,time

class Logic(threading.Thread):
    def __init__(self,starttime,total):
        threading.Thread.__init__(self)
        #self._stop = threading.Event()
        self.control = Controller(starttime,total)
        self.vision = Vision(starttime,total)
        self.states = ['r', 'b', 'y']
        self.current_st = 'r'
        self.ballcount = 0
        self.st = starttime
        self.total = total
    
    def run(self):   
        while  time.time() - self.st < self.total:
            self.getBall()           
            self.dumpBall()
            #print "success"
            break        
        
    def getBall(self):        
        while  time.time() - self.st < self.total and self.control.new==0:            
            self.findObj()      
            #print "step 1"                                            
            self.control.goStraight(1)
            if sum(self.control.bumper)!=0:
                self.getOutStuck()
        if self.control.new==1:
            self.ballcount+=1
            self.control.new=0
            self.current_st = 'y'
            
    def dumpBall(self):        
        while  time.time() - self.st < self.total and self.current_st == 'y':                        
            self.findObj()            
            self.control.goStraight(1)
            self.control.throwBall()    
            self.ballcount=0
            self.current_st = 'r'        
            
        
    def findObj(self):
        found = self.vision.findObj(self.current_st)
        while not found and time.time() - self.st < self.total:
            self.control.goTurn(15)
            found = self.vision.findObj(self.current_st)
            print "rotate",self.control.angle,found
            
    def getOutStuck(self):
        """
        out = 1
        while out!=0 and time.time() - self.st < self.total:
            self.control.goTurn(15)
            out = sum(self.control.bumper)
            print "rotate to get out of stuck",self.control.x,self.control.y,self.control.angle,out
        """
        self.control.goStraight(-1)
        time.sleep(2)
        self.control.goTurn(30)
            
            
