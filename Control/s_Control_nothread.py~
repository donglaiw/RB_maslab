import numpy as np
import time,threading
import math


class Controller():
    def __init__(self,starttime,total):
        threading.Thread.__init__(self,starttime,total)
        self.width_h = 30
        self.height_h = 20
        self.x = 249
        self.y = 200
        self.angle = 270.0
        self.camangle = 30.0
        self.eatangle = 10.0
        self.bp_val = [0, 0, 0, 0]
        self.ir_val = [0, 0, 0, 0]
        self.thrown = False
        self.ballnum = 0 
        self.step = 20
        self.st = starttime
        self.total = total
        self.count=0
        self.new=0
        self.dir=1
        self.motorstate=''
    
    def getBallCount(self):
        return 1
    
    def run(self):
        while time.time()-self.st<self.total:
            #ordered by freq
            if self.motorstate!='':                
                if self.motorstate=='S':
                    self.goStraight()                    
                elif self.motorstate=='T':
                    self.goTurn()
                elif self.motorstate=='B':
                    self.throwBall()
                #back to normal 
                self.motorstate=''               

    def goStraight(self):        
        while time.time()-self.st<self.total and (self.dir==-1 or sum(self.bumper)==0):
            an=self.angle/180*math.pi
            self.x -= self.dir*self.step * math.sin(an)
            self.y += self.dir*self.step * math.cos(an)
            time.sleep(1)
            
            if self.dir==-1:
                print "go back",self.x,self.y
                self.x -= self.dir*self.step * math.sin(an)
                self.y += self.dir*self.step * math.cos(an)
                self.dir=1
                print "now",self.x,self.y                 
                break
            """"""
            #print "go straight",self.x,self.y,self.angle

        """
        while sum(self.control.bumper())==1:
            #only rotate
            a=1
        """
                
    def goTurn(self, angle):
        #print "angle : ",self.angle 
        self.angle += angle
        if self.angle > 360:
            self.angle -= 360
        elif self.angle < 0:
            self.angle += 360
        time.sleep(1)
    """
    def adjust(self,angle):
        an=(self.angle+angle)/180*math.pi
        self.x -= self.dir*self.step * math.sin(an)
        self.y += self.dir*self.step * math.cos(an)
    """
    def throwBall(self):
        self.thrown = True                            
